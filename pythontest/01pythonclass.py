print("你好！")

#元组

b=("haha","xixi")
a=[1,2,3,4,5,5,6,b]
"""
print(a[3])
print(a[-4])

print(a.index(4))
print(a.count(5))

print(a[-1][-1])

print(a[0:3])
"""
name = input("请输入：")
a.append(name)
print(a)
a.insert(3,"halou?")
print(a)
xx = a.pop(5)
print(xx)

#所有的符号均为英文输入法状态下的
print("你好！")  #字符串
print(2333) #整数
print(2.333) #小数
print(True,False) #布尔值：只有两种写法True/1和False/0，对大小写非常敏感。

print(1>3) #输出的值为False
print(1<3) #输出的值为True

print(None) #空
print(()) #元组
print([]) #数组
print({}) #字典
#以上输出的内容都是自动换行的，在某行后面加上end=""，就不会自动换行了。
#end=""的意思是不换行，以某个内容结尾；
#end=""表示不换行并以空结尾，上述的内容没写end，默认表示以换行结尾。
#不换行示例如下：
#(1)
print("你好呀！",end="")
print("欢迎欢迎。")
#(2)
print("你好呀",end="欢欢")
print("!")
#字符串可以相加、相乘，但不能相减、相除
print("嘻嘻"+"哈哈")
print("嘻嘻"*100) 
#数字（整数和小数）可以实现正常的数学运算：相加、减、乘、除、余，
#且符合运算规律：先乘除、后加减、有括号先算括号。
## python的运算符
print(1+1) # + 加
print(1-1) # - 减
print(1*1) # * 乘
print(1/1) # / 除
print(10%3) # % 求余
print(10//3) # // 取整

print(1==2 and 1<3)

name ="张三"
#表示把张三这个赋值给了name这个变量
print(name)

# 元组
t =() 
# 表示定义了一个元组，并把这个元组赋值给了t这个变量，
# ()这个元组内没有任何值，所以叫做空元组；
# 即表示元组是用来装数据的，元组内可以装任何的数据（数字、字符串、布尔值、空等）如下：
a = (1,2,3,4,"你好","halo",True,None) 
# 使用元组最直观的好处是可以少写介个变量，更加的方便。
# 每个变量都会占用内存，变量越多，占的越多。

# 下标就是计算机自动给我们的值编的号，是从0开始
a[4] # 表示从0开始，从左往右数到4的值：你好
a[-4] # 从右往左数是-1、-2、-3..，所以也表示：你好
print(a[4])
print(a[-4])

# 获取某个值的下标
print(a.index("你好"))

#获取某个值的个数
print(a.count(1))

# 元组里也可以放元组
b =("联想","想象")
a = (1,2,3,4,"你好","halo",True,None,b) 
# a里面有一个元组b，这样的元组内又放了一个元组叫做二维元组
# ((),()) 二维元组
# ((()),()) 三维元组

# 从二维元组内取值，如取“想象”这个值
print(a[-1][-1]) 
# 对于多维元组的取值要采用层层递进的方式
print(a[-1]) 
# 表示从右往左数的下标为-1的值：元组b，
print(a[-1][-1])
print(a[-1][1])
# 再继续添加[-1]，表示在b后添加下标[-1]，表示元组b从右往左数下标为-1的值：想象
# 或者添加[1]，表示从左往右数，取元组b中下标为1的值：想象

# 求二维元组中值的下标
# 先定位到b元组中，其次在b元组下用index的方法，如下：
print(a[-1].index("联想"))

# 切片（左闭右开的区间）
# 同时取多个值：从从第几个到第几个值
print(a[0:3]) # 取元组中下标为0-2的值，下标3的值不包含在内

# 数组 也可以叫做列表
b =("联想","想象")
a = [1,2,3,4,"你好","halo",True,None,b] #元组内可以装数组，数组内也可以装元组
print(a)

# 在a这个数组的指定位置添加内容
name =input ("请输入：") #输入一个值
a.append(name) # 表示把输入的name的值直接添加值数组a的最后
a.insert(3,name)
print(a) #输出的结果

# a.pop(5) 表示取走a中下标为5的值
xx = a.pop(5) #xx表示从a里取走的那个值
print(xx) #输出取走的那个值是什么

# 合并数组
c = [6,7,8] 
a.extend(c) #把数组c的值取出来，并加入到数组a后面
print(a)

# 也可以用数组相加的方式
a = a + e
print(a)

#排序
d = [3,2,5,4]
d.sort() # 把数组d内的值从小到大排序
print(d)

d.sort(reverse=True) # 把数组d内的值从大到小排序
print(d)

d = [3,2,5,4]
d.reverse() #可以让数组内的值，颠倒顺序
print(d)

d.clear() #把数组d内的值全部清空
print(d)

b =("联想","想象")
a = [1,2,3,4,"你好","halo",True,None,b] 
print(a)
a.remove("halo") #把某个值从数组中删掉，如果又多个一样的数据，只删除一个
print(a)

# 字典 
# 没有下标的概念，说明了字典没有顺序 
# 字典取值靠key
a = {"name":"张三","age":12} #{key:value}
print(a["name"])
print(a["age"])

# # 取值
a["name"] # 写了一个不存在的key，输出的结果会报错
a.get("name") # 写了不存在的key，输出的结果不会报错，会返回一个None

# 新增 
a.["addres"]="成都" # 当key不存在时就会新增，存在时就会修改
a.update(name="王二") # update的写法时，key在这里是一个变量的写法
                     # 当key不存在时就会新增，存在时就会修改
# 取走
a.pop("name")
# 通用的删除方法，可以删字典，也可以删数组
del a["name"] # 可以把name删掉，如果是数组，就把name换成下标

# keys、value
print(list(a.keys())) #表示把字典a的所有key取出，并以数组的形式展现，也可以把value都取出来



